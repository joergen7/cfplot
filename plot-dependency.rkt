#lang typed/racket/base

(provide Digraph
         dependency-data
         plot-digraph)

(require (only-in "history.rkt"
                  Entry
                  Entry-app
                  Entry-delta
                  History
                  Delta-result
                  Result-stat
                  Stat-stage-in-lst
                  Stat-stage-out-lst
                  App
                  Delta
                  Result
                  Stat
                  File-Interval
                  File-Interval-filename
                  App-app-id))

(struct Digraph ([node-lst : (Listof Node)]
                 [edge-lst : (Listof Edge)])
  #:prefab)

(struct Node ([id   : String]
              [type : (U 'file 'app)])
  #:prefab)

(struct Edge ([src-id  : String]
              [dest-id : String])
  #:prefab)

(: dependency-data (History -> Digraph))
(define (dependency-data history-unfiltered)

  ; define predicate that selects only app/delta pairs that produce or consume files
  (: data-processor? (Entry -> Boolean))
  (define (data-processor? app-delta-pair)
    (define stat          : Stat (Result-stat (Delta-result (Entry-delta app-delta-pair))))
    (define stage-in-lst  : (Listof File-Interval) (Stat-stage-in-lst stat))
    (define stage-out-lst : (Listof File-Interval) (Stat-stage-out-lst stat))
    (not (and (null? stage-in-lst) (not (null? stage-out-lst)))))

  ; use the predicate to filter the history to contain only entries that touch files
  (define history : History
    (filter data-processor? history-unfiltered))

  ; extract input filenames
  (define input-file-lst : (Listof String)
    (for/fold ([input-file-lst : (Listof String)    '()])
              ([app-delta-pair : Entry (in-list history)])
      
      (define fil : (Listof File-Interval)
        (Stat-stage-in-lst (Result-stat (Delta-result (Entry-delta app-delta-pair)))))

      (define sl : (Listof String)
        (for/list ([fi : File-Interval (in-list fil)]) (File-Interval-filename fi)))

      (list-union sl input-file-lst)))

  ; extract output filenames
  (define output-file-lst : (Listof String)
    (for/fold ([output-file-lst : (Listof String)    '()])
              ([app-delta-pair  : Entry (in-list history)])
      
      (define fil : (Listof File-Interval)
        (Stat-stage-out-lst (Result-stat (Delta-result (Entry-delta app-delta-pair)))))

      (define sl : (Listof String)
        (for/list ([fi : File-Interval (in-list fil)]) (File-Interval-filename fi)))
      
      (list-union sl output-file-lst)))

  ; source files are input files that are not intermediate files
  (define src-file-lst : (Listof String)
    (list-diff input-file-lst output-file-lst))

  ; sink files are output files that are not intermediate files
  (define sink-file-lst : (Listof String)
    (list-diff output-file-lst input-file-lst))

  ; prepare a hash-table mapping a file to the node id that generated that file
  (define t : (Mutable-HashTable String String)
    (make-hash))

  ; first, source files are generated by themselves
  (for-each (λ ([sf : String]) (hash-set! t sf sf)) src-file-lst)

  ; next, each application generated its list of output files
  (for-each
   (λ ([app-delta-pair : Entry])

     (define app-id : String
       (App-app-id (Entry-app app-delta-pair)))
     
     (define fil : (Listof File-Interval)
       (Stat-stage-out-lst (Result-stat (Delta-result (Entry-delta app-delta-pair)))))
     
     (define sl : (Listof String)
       (for/list ([fi : File-Interval (in-list fil)])
         (File-Interval-filename fi)))

     (for-each (λ ([s : String]) (hash-set! t s app-id)) sl))
   history)



  

  (define src-node-lst : (Listof Node)
    (for/list ([s : String (in-list src-file-lst)])
      (Node s 'file)))

  (define sink-node-lst : (Listof Node)
    (for/list ([s : String (in-list sink-file-lst)])
      (Node s 'file)))

  (define app-node-lst : (Listof Node)
    (for/list ([app-delta-pair : Entry (in-list history)])
      (Node (App-app-id (Entry-app app-delta-pair))
            'app)))

  (define edge-lst
    (append
     
     (for/fold ([edge-lst       : (Listof Edge)      '()])
               ([app-delta-pair : Entry (in-list history)])

       (define app-id : String
         (App-app-id (Entry-app app-delta-pair)))
       
       (define inl : (Listof File-Interval)
         (Stat-stage-in-lst (Result-stat (Delta-result (Entry-delta app-delta-pair)))))

       (define input-edge-lst : (Listof Edge)
         (for/list ([fi : File-Interval inl])
           (Edge (hash-ref t (File-Interval-filename fi)) app-id)))

       (append edge-lst input-edge-lst))

     (for/fold ([edge-lst       : (Listof Edge) '()])
               ([app-delta-pair : Entry (in-list history)])

       (define app-id : String
         (App-app-id (Entry-app app-delta-pair)))

       (define outl : (Listof File-Interval)
         (Stat-stage-out-lst (Result-stat (Delta-result (Entry-delta app-delta-pair)))))

       (define output-edge-lst : (Listof Edge)
         (for/fold ([oel : (Listof Edge) '()])
                   ([fi  : File-Interval outl])

           (define filename : String
             (File-Interval-filename fi))

           (if (member filename sink-file-lst)
               (cons (Edge app-id filename) oel)
               oel)))

       (append edge-lst output-edge-lst))))

      
  

  

  
  (Digraph (append src-node-lst sink-node-lst app-node-lst)
           edge-lst))


(: list-union (All (a) (Listof a) (Listof a) -> (Listof a)))
(define (list-union xs ys)
  (for/fold ([acc : (Listof a) ys])
            ([x   : a          (in-list xs)])
    (if (member x acc)
        acc
        (cons x acc))))


(: list-diff (All (a) (Listof a) (Listof a) -> (Listof a)))
(define (list-diff xs ys)
  (for/fold ([acc : (Listof a) '()])
            ([x   : a          (in-list xs)])
    (if (member x ys)
        acc
        (cons x acc))))

(: plot-digraph (Digraph Path-String -> Void))
(define (plot-digraph digraph filename)

  (: proc (Output-Port -> Void))
  (define (proc port)

    (write-string "digraph G {\n  nodesep=0.03;\n\n" port)

    (for-each
     (λ ([node : Node])
      
      (define color : String
        (if (eq? (Node-type node) 'app)
            "blue"
            "darkgoldenrod"))

      (define s : String
        (format "  \"~a\" [shape=box,color=~a,width=0.01,label=\"\"];\n"
                (Node-id node)
                color))

      (write-string s port))
     (Digraph-node-lst digraph))

    (for-each
     (λ ([edge : Edge])

      (define s : String
        (format "  \"~a\" -> \"~a\" [headport=n,tailport=s];\n"
                (Edge-src-id edge)
                (Edge-dest-id edge)))

      (write-string s port))
     (Digraph-edge-lst digraph))
    
    (write-string "}\n" port)
    (void))

  (call-with-output-file filename proc #:mode 'text #:exists 'replace))
                 

             